#2. Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxSum = nums[0];
        int currSum = nums[0];
       
        for(int i=1; i<nums.size(); i++){
            currSum = max(nums[i], currSum + nums[i]);
            maxSum = max(currSum, maxSum); 
        }
        
        return maxSum;
    }
};

#3. Ease the Array 
       void modifyAndRearrangeArr(int arr[], int n) 
    { 
    	if (n == 1)
        return;
        for (int i = 0; i < n - 1; i++) 
        {
        if ((arr[i] != 0) && (arr[i] == arr[i + 1])) 
        {

            arr[i] = 2 * arr[i];
            arr[i + 1] = 0;
            i++;
        }
        }
    int count = 0;
    for (int i = 0; i < n; i++)
        if (arr[i] != 0)
            arr[count++] = arr[i];
    while (count < n)
        arr[count++] = 0;
    
}
}; 

#5. Stock prices
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int price=prices[0];
        int profit=0;
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i]<price)
                price=prices[i];
            profit = max(profit, prices[i]-price);
        }
        return profit;
    }
};

#6. Search Insert Position
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low =0, high =nums.size()-1;
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            if(nums[mid]==target)
                return mid;
            else if(target>nums[mid])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return low;
    }
  
};

#7. Sort 0,1,2
void sort012(int a[], int n)
    {
       int lo = 0;
    int hi = n - 1;
    int mid = 0;
    while (mid <= hi) 
{
        switch (a[mid])
{
        case 0:
            swap(a[lo++], a[mid++]);
            break;
        case 1:
            mid++;
            break;
        case 2:
            swap(a[mid], a[hi--]);
            break;
        }
    }
} 

